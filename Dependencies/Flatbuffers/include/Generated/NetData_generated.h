// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NETDATA_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_NETDATA_SERIALIZATION_H_

#include "flatbuffers.h"

namespace Serialization {

struct Layer;

struct NetData;

struct Layer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__WEIGHT = 4,
    VT__DELTA_WEIGHT = 6
  };
  const flatbuffers::Vector<float> *_weight() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT__WEIGHT);
  }
  const flatbuffers::Vector<float> *_delta_weight() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT__DELTA_WEIGHT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT__WEIGHT) &&
           verifier.Verify(_weight()) &&
           VerifyOffset(verifier, VT__DELTA_WEIGHT) &&
           verifier.Verify(_delta_weight()) &&
           verifier.EndTable();
  }
};

struct LayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__weight(flatbuffers::Offset<flatbuffers::Vector<float>> _weight) {
    fbb_.AddOffset(Layer::VT__WEIGHT, _weight);
  }
  void add__delta_weight(flatbuffers::Offset<flatbuffers::Vector<float>> _delta_weight) {
    fbb_.AddOffset(Layer::VT__DELTA_WEIGHT, _delta_weight);
  }
  explicit LayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LayerBuilder &operator=(const LayerBuilder &);
  flatbuffers::Offset<Layer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Layer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Layer> CreateLayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> _weight = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> _delta_weight = 0) {
  LayerBuilder builder_(_fbb);
  builder_.add__delta_weight(_delta_weight);
  builder_.add__weight(_weight);
  return builder_.Finish();
}

inline flatbuffers::Offset<Layer> CreateLayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *_weight = nullptr,
    const std::vector<float> *_delta_weight = nullptr) {
  return Serialization::CreateLayer(
      _fbb,
      _weight ? _fbb.CreateVector<float>(*_weight) : 0,
      _delta_weight ? _fbb.CreateVector<float>(*_delta_weight) : 0);
}

struct NetData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__LAYER = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Layer>> *_layer() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Layer>> *>(VT__LAYER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT__LAYER) &&
           verifier.Verify(_layer()) &&
           verifier.VerifyVectorOfTables(_layer()) &&
           verifier.EndTable();
  }
};

struct NetDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__layer(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> _layer) {
    fbb_.AddOffset(NetData::VT__LAYER, _layer);
  }
  explicit NetDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NetDataBuilder &operator=(const NetDataBuilder &);
  flatbuffers::Offset<NetData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NetData>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetData> CreateNetData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> _layer = 0) {
  NetDataBuilder builder_(_fbb);
  builder_.add__layer(_layer);
  return builder_.Finish();
}

inline flatbuffers::Offset<NetData> CreateNetDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Layer>> *_layer = nullptr) {
  return Serialization::CreateNetData(
      _fbb,
      _layer ? _fbb.CreateVector<flatbuffers::Offset<Layer>>(*_layer) : 0);
}

inline const Serialization::NetData *GetNetData(const void *buf) {
  return flatbuffers::GetRoot<Serialization::NetData>(buf);
}

inline bool VerifyNetDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Serialization::NetData>(nullptr);
}

inline void FinishNetDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Serialization::NetData> root) {
  fbb.Finish(root);
}

}  // namespace Serialization

#endif  // FLATBUFFERS_GENERATED_NETDATA_SERIALIZATION_H_
